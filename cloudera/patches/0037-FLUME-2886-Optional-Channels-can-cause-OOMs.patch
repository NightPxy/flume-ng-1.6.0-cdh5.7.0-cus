From 8f5f5143ae30802fe79f9ab96f893e6c54a105d1 Mon Sep 17 00:00:00 2001
From: Jarek Jarcec Cecho <jarcec@apache.org>
Date: Tue, 23 Feb 2016 08:17:34 -0800
Subject: [PATCH 37/37] FLUME-2886: Optional Channels can cause OOMs

(Hari Shreedharan via Jarek Jarcec Cecho)

Change-Id: I6c4d8b068d2187d5274dcbd999759aa909cad90d
---
 .../org/apache/flume/channel/ChannelProcessor.java |   13 ++++---
 .../apache/flume/channel/TestChannelProcessor.java |   38 ++++++++++++++++++++
 2 files changed, 47 insertions(+), 4 deletions(-)

diff --git a/flume-ng-core/src/main/java/org/apache/flume/channel/ChannelProcessor.java b/flume-ng-core/src/main/java/org/apache/flume/channel/ChannelProcessor.java
index f2612a6..7b2de7c 100644
--- a/flume-ng-core/src/main/java/org/apache/flume/channel/ChannelProcessor.java
+++ b/flume-ng-core/src/main/java/org/apache/flume/channel/ChannelProcessor.java
@@ -26,8 +26,7 @@ import java.util.ArrayList;
 import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
-import java.util.concurrent.Executors;
-import java.util.concurrent.ExecutorService;
+import java.util.concurrent.*;
 
 import org.apache.flume.Channel;
 import org.apache.flume.ChannelException;
@@ -62,6 +61,7 @@ public class ChannelProcessor implements Configurable {
   private final ChannelSelector selector;
   private final InterceptorChain interceptorChain;
   private ExecutorService execService;
+  BlockingQueue<Runnable> taskQueue;
 
   public ChannelProcessor(ChannelSelector selector) {
     this.selector = selector;
@@ -82,8 +82,13 @@ public class ChannelProcessor implements Configurable {
    */
   @Override
   public void configure(Context context) {
-    this.execService = Executors.newSingleThreadExecutor(
-      new ThreadFactoryBuilder().setNameFormat("OptionalChannelProcessorThread").build());
+    int queueSize = context.getInteger("pendingTransactions", 20);
+    taskQueue = new ArrayBlockingQueue<Runnable>(queueSize, true);
+    ThreadFactory factory = new ThreadFactoryBuilder()
+      .setNameFormat("OptionalChannelProcessorThread").build();
+    this.execService =
+      new ThreadPoolExecutor(1, 1, 0, TimeUnit.MILLISECONDS, taskQueue,
+        factory, new ThreadPoolExecutor.DiscardPolicy());
     configureInterceptors(context);
   }
 
diff --git a/flume-ng-core/src/test/java/org/apache/flume/channel/TestChannelProcessor.java b/flume-ng-core/src/test/java/org/apache/flume/channel/TestChannelProcessor.java
index 924c998..c2a5748 100644
--- a/flume-ng-core/src/test/java/org/apache/flume/channel/TestChannelProcessor.java
+++ b/flume-ng-core/src/test/java/org/apache/flume/channel/TestChannelProcessor.java
@@ -148,4 +148,42 @@ public class TestChannelProcessor {
     }
   }
 
+  @SuppressWarnings("unchecked")
+  @Test
+  public void testOptionalChannelQueueSize() throws InterruptedException {
+    Context context = new Context();
+    context.put("capacity", "100");
+    context.put("transactionCapacity", "3");
+    context.put("pendingTransactions", "2");
+
+    ArrayList<MemoryChannel> channels = new ArrayList<MemoryChannel>();
+    for (int i = 0; i < 2; i++) {
+      MemoryChannel ch = new MemoryChannel();
+      ch.setName("ch" + i);
+      channels.add(ch);
+    }
+    Configurables.configure(channels.get(0), context);
+    context.put("capacity", "3");
+    Configurables.configure(channels.get(1), context);
+    ChannelSelector selector = new ReplicatingChannelSelector();
+    selector.setChannels((List) channels);
+
+    context.put(ReplicatingChannelSelector.CONFIG_OPTIONAL, "ch1");
+    Configurables.configure(selector, context);
+
+    ChannelProcessor processor = new ChannelProcessor(selector);
+    Configurables.configure(processor, context);
+
+    // The idea is to put more events into the optional channel than its capacity + the size of
+    // the task queue. So the remaining events get added to the task queue, but since it is
+    // bounded, its size should not grow indefinitely either.
+    for (int i = 0; i <= 6; i++) {
+      processor.processEvent(EventBuilder.withBody("e".getBytes()));
+      // To avoid tasks from being rejected so if previous events are still not committed, wait
+      // between transactions.
+      Thread.sleep(500);
+    }
+    // 3 in channel, 1 executing, 2 in queue, 1 rejected
+    Assert.assertEquals(2, processor.taskQueue.size());
+  }
 }
-- 
1.7.9.5

